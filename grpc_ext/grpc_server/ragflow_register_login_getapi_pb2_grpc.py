# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""

import grpc
import warnings

import ragflow_register_login_getapi_pb2 as ragflow__register__login__getapi__pb2

GRPC_GENERATED_VERSION = "1.63.0"
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = "1.65.0"
SCHEDULED_RELEASE_DATE = "June 25, 2024"
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower

    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f"The grpc package installed is at version {GRPC_VERSION},"
        + " but the generated code in ragflow_register_login_getapi_pb2_grpc.py depends on"
        + f" grpcio>={GRPC_GENERATED_VERSION}."
        + f" Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}"
        + f" or downgrade your generated code using grpcio-tools<={GRPC_VERSION}."
        + f" This warning will become an error in {EXPECTED_ERROR_RELEASE},"
        + f" scheduled for release on {SCHEDULED_RELEASE_DATE}.",
        RuntimeWarning,
    )


class RagServicesStub(object):
    """Define the service"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Registration = channel.unary_unary(
            "/ragflow.RagServices/Registration",
            request_serializer=ragflow__register__login__getapi__pb2.RegistrationCredentials.SerializeToString,
            response_deserializer=ragflow__register__login__getapi__pb2.ResponseString.FromString,
            _registered_method=True,
        )
        self.Login = channel.unary_unary(
            "/ragflow.RagServices/Login",
            request_serializer=ragflow__register__login__getapi__pb2.LoginCredentials.SerializeToString,
            response_deserializer=ragflow__register__login__getapi__pb2.ResponseString.FromString,
            _registered_method=True,
        )
        self.GetApiKey = channel.unary_unary(
            "/ragflow.RagServices/GetApiKey",
            request_serializer=ragflow__register__login__getapi__pb2.LoginCredentials.SerializeToString,
            response_deserializer=ragflow__register__login__getapi__pb2.ResponseString.FromString,
            _registered_method=True,
        )


class RagServicesServicer(object):
    """Define the service"""

    def Registration(self, request, context):
        """Register user in Ragflow"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Login(self, request, context):
        """Login user in Ragflow"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetApiKey(self, request, context):
        """New API key for user in Ragflow"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_RagServicesServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "Registration": grpc.unary_unary_rpc_method_handler(
            servicer.Registration,
            request_deserializer=ragflow__register__login__getapi__pb2.RegistrationCredentials.FromString,
            response_serializer=ragflow__register__login__getapi__pb2.ResponseString.SerializeToString,
        ),
        "Login": grpc.unary_unary_rpc_method_handler(
            servicer.Login,
            request_deserializer=ragflow__register__login__getapi__pb2.LoginCredentials.FromString,
            response_serializer=ragflow__register__login__getapi__pb2.ResponseString.SerializeToString,
        ),
        "GetApiKey": grpc.unary_unary_rpc_method_handler(
            servicer.GetApiKey,
            request_deserializer=ragflow__register__login__getapi__pb2.LoginCredentials.FromString,
            response_serializer=ragflow__register__login__getapi__pb2.ResponseString.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler("ragflow.RagServices", rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class RagServices(object):
    """Define the service"""

    @staticmethod
    def Registration(request, target, options=(), channel_credentials=None, call_credentials=None, insecure=False, compression=None, wait_for_ready=None, timeout=None, metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/ragflow.RagServices/Registration",
            ragflow__register__login__getapi__pb2.RegistrationCredentials.SerializeToString,
            ragflow__register__login__getapi__pb2.ResponseString.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def Login(request, target, options=(), channel_credentials=None, call_credentials=None, insecure=False, compression=None, wait_for_ready=None, timeout=None, metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/ragflow.RagServices/Login",
            ragflow__register__login__getapi__pb2.LoginCredentials.SerializeToString,
            ragflow__register__login__getapi__pb2.ResponseString.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def GetApiKey(request, target, options=(), channel_credentials=None, call_credentials=None, insecure=False, compression=None, wait_for_ready=None, timeout=None, metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/ragflow.RagServices/GetApiKey",
            ragflow__register__login__getapi__pb2.LoginCredentials.SerializeToString,
            ragflow__register__login__getapi__pb2.ResponseString.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )
